[build-system]
build-backend = "poetry.core.masonry.api"

requires = [
  "poetry-core",
]

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11, <4.0"
streamlit = "^1.46.1"
jinja2 = "^3.1.6"
pyyaml = "^6.0.1"
chardet = "^5.2.0"
python-box = "^7.2.0"
pydantic = "^2.11.7"
toml = "^0.10.2"
markupsafe = "^3.0.2"

[tool.poetry.group.dev.dependencies]
mypy = "^1.16.1"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
types-toml = "^0.10.8.20240310"
pre-commit = "^4.2.0"
lizard = "^1.17.31"
poetry-types = "^0.6.0"
types-pyyaml = "^6.0.12.20250516"
pydeps = "^3.0.1"
pytest-playwright = "^0.7.0"
ruff = "^0.12.2"
pandas-stubs = "^2.3.0.250703"
mock = "^5.2.0"
gitpython = "^3.1.44"
packaging = "^25.0"
pudb = "^2025.1"
pytest-xdist = "^3.8.0"
pytest-mock = "^3.14.1"
psutil = "^7.0.0"
pytest-randomly = "^3.16.0"
pytest-benchmark = "5.1.0"
pytest-clarity = "^1.0.1"
pygal = "^3.0.5"
pytest-timeout = "^2.4.0"
pyre-check = "^0.9.23"
pytest-item-dict = "^1.1.2"
pytest-xml = "^0.1.1"
data-to-xml = "^1.0.9"
vulture = "^2.14"
yamllint = "^1.37.1"
types-psutil = "^7.0.0.20250601"
types-requests = "^2.32.4.20250611"

[tool.ruff]
target-version = "py312"
line-length = 140
indent-width = 4
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]
format.indent-style = "space"
format.quote-style = "double"
format.line-ending = "auto"
format.skip-magic-trailing-comma = false
format.docstring-code-line-length = "dynamic"
lint.select = [
  "A",
  "ANN",
  "B",
  "E",
  "F",
  "I",
  "N",
  "PT",
  "PT001",
  "RUF",
  "S",
  "SLF",
  "TC",
  "TCH",
]
lint.ignore = [
  "RUF002",
]
lint.per-file-ignores."scripts/create_pr.py" = [
  "S603",
]
lint.per-file-ignores."tests/*" = [
  "PT001", # Use @pytest.fixture{expected} over @pytest.fixture{actual}
  "PT023", # Use @pytest.mark.{mark_name}{expected_parens} over @pytest.mark.{mark_name}{actual_parens}
  "S101",  # Use of assert detected
  "S307",  # Use of assert detected
  "S603",  # `subprocess` call: check for execution of untrusted input
]
lint.per-file-ignores."tests/e2e/conftest.py" = [
  "S404",
]
lint.per-file-ignores."tests/workflow/*" = [
  "S105", # Possible hardcoded password assigned to: "{}"
]
# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
  "ALL",
]
lint.unfixable = [
]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.pytest.ini_options]
testpaths = [
  "tests",
]
pythonpath = "."
addopts = [
  "-vv",
  "--maxfail=10",
  "--durations=30",
  "--import-mode=importlib",
]
markers = [
  "unit: mark a test as a unit test.",
  "integration: mark a test as an integration test.",
  "e2e: mark a test as an end-to-end test",
  "benchmark: mark a test for benchmarking",
]

[tool.coverage.run]
parallel = false
omit = [
  "tests/e2e/*",
  ".venv/*",
  "node_modules/*",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "raise ImportError",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
check_untyped_defs = true
exclude = [
  ".venv",
  "build",
  "dist",
  "assets",
  "node_modules",
  "htmlcov",
]
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_decorators = false
disallow_incomplete_defs = false
ignore_errors = false
ignore_missing_imports = false
pretty = true
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
warn_unreachable = true

[tool.benchmark]
min_time = 0.1
max_time = 2.0
min_rounds = 3
timer = "time.perf_counter"
disable_gc = false
warmup = false
warmup_iterations = 10000

[tool.vulture]
paths = [
  "app.py",
  "features",
  "tests",
  "tests/e2e",
  "tests/unit",
]
make_whitelist = true
min_confidence = 80
sort_by_size = true
verbose = false
